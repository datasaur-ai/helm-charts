image:
  registry: ""
  dockerTag: "latest"
  pullPolicy: "IfNotPresent"
  internal: false

dockerHub:
  enabled: true

services:
  backend:
    replicas: 2
    resources:
      auto: true
      requests:
        cpu: null
        memory: null
      limits:
        cpu: null
        memory: null
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 10
      targetCPUUtilizationPercentage: 80
      targetMemoryUtilizationPercentage: 80
  worker:
    critical:
      enabled: true
      replicas: 2
      resources:
        auto: true
        requests:
          cpu: null
          memory: null
        limits:
          cpu: null
          memory: null
      autoscaling:
        enabled: false
        minReplicas: 1
        maxReplicas: 10
        targetCPUUtilizationPercentage: 80
        targetMemoryUtilizationPercentage: 80
      consume: critical
    background:
      enabled: true
      replicas: 2
      resources:
        auto: true
        requests:
          cpu: null
          memory: null
        limits:
          cpu: null
          memory: null
      autoscaling:
        enabled: false
        minReplicas: 1
        maxReplicas: 10
        targetCPUUtilizationPercentage: 80
        targetMemoryUtilizationPercentage: 80
      consume: background
    external:
      enabled: true
      replicas: 1
      resources:
        auto: true
        requests:
          cpu: null
          memory: null
        limits:
          cpu: null
          memory: null
      autoscaling:
        enabled: false
        minReplicas: 1
        maxReplicas: 10
        targetCPUUtilizationPercentage: 80
        targetMemoryUtilizationPercentage: 80
      consume: external,action
  urlInspector:
    proxy: false
    replicas: 2
    resources:
      auto: true
      requests:
        cpu: null
        memory: null
      limits:
        cpu: null
        memory: null
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 10
      targetCPUUtilizationPercentage: 80
      targetMemoryUtilizationPercentage: 80
  database:
    enabled: false
    resources:
      auto: true
      requests:
        cpu: null
        memory: null
      limits:
        cpu: null
        memory: null
    storage: 40G
  frontend:
    resources:
      auto: true
      requests:
        cpu: null
        memory: null
      limits:
        cpu: null
        memory: null
  apacheTika:
    enabled: true
  audiowaveformGenerator:
    enabled: true
  documentConverter:
    enabled: true
  languageTool:
    enabled: true
  presidioAnalyzer:
    enabled: true
  rabbitmq:
    enabled: false
  redis:
    enabled: false
  languageCrunch:
    enabled: false
  coreNlp:
    enabled: false
  sparknlpProvider:
    enabled: false

tls:
  cert: null
  key: null
  ca: null
  verifyDepth: "1"
  errorPage: null
  secretName: null

env: null

secret: null

imageCredentials:
  username: ""
  password: ""

ingress:
  host: null
  uploadProxyHost: null
  sessionDomain: null
  proxyBodySize: 125m

files: {}

jobs:
  abelMigrator: false

loki:
  enabled: true
  alerting: null

  auth:
    username: null
    password: null

  grafana:
    enabled: true
    grafana.ini:
      server:
        root_url: "%(protocol)s://%(domain)s/grafana/"
        serve_from_sub_path: true
    extraConfigmapMounts:
      - name: grafana-alert-provisioning
        mountPath: /etc/grafana/provisioning/alerting
        configMap: grafana-alert-provisioning
        subPath: ""
        readOnly: true
    image:
      tag: 9.5.2

  promtail:
    config:
      logLevel: info
      serverPort: 3101
      clients:
        - url: http://{{ .Release.Name }}-loki:3100/loki/api/v1/push

analytics:
  enabled: false

metabasemysql:
  primary:
    resources:
      requests:
        cpu: 100m
        memory: 1500Mi

    persistence:
      size: 1Gi

    configuration: |-
      [mysqld]
      skip-log-bin
      default_authentication_plugin=mysql_native_password
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mysql
      plugin_dir=/opt/bitnami/mysql/lib/plugin
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      datadir=/bitnami/mysql/data
      tmpdir=/opt/bitnami/mysql/tmp
      max_allowed_packet=16M
      bind-address=0.0.0.0
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
      log-error=/opt/bitnami/mysql/logs/mysqld.log
      character-set-server=UTF8
      collation-server=utf8_general_ci
      [client]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      default-character-set=UTF8
      plugin_dir=/opt/bitnami/mysql/lib/plugin
      [manager]
      port=3306
      socket=/opt/bitnami/mysql/tmp/mysql.sock
      pid-file=/opt/bitnami/mysql/tmp/mysqld.pid<root_password>
      expire_logs_days=3
  auth:
    password: admin
    rootPassword: admin
    createDatabase: true
    database: metabase

metabase:
  embedding_key: null
  image:
    repository: public.ecr.aws/glair/metabase
    tag: v0.44.3
  resource:
    request:
      cpu: 100m
      memory: 800Mi
  database:
    type: mysql
    connectionURI: "mysql://root:{{ .Values.metabasemysql.auth.rootPassword }}@{{ .Release.Name }}-metabasemysql:3306"
  replicaCount: 1
  clearcache:
    enabled: true
    schedule: "0 */3 * * *"
    secret:
      db_host: null
      db_name: metabase
      db_user: root
      db_pass: admin

metabaseImporter:
  enabled: false
  secret:
    aws:
      access_key: null
      secret_key: null
      region: null
      s3_bucket: null
      athena_workgroup: null
      glue_catalog_name: null
  resources:
    limits:
      cpu: 100m
      memory: 1500Mi
    requests:
      cpu: 10m
      memory: 800Mi

glairAgent:
  config:
    s3_bucket: null
    cron_expression: "0 */3 * * *"
    run_backfill: true

  image:
    repository: public.ecr.aws/glair/glair-agent
    tag: v0.1.20
    pullPolicy: IfNotPresent

  secret:
    aws:
      access_key_id: null
      default_region: null
      secret_access_key: null
    db:
      database: metabase
      host: null
      user: root
      password: null

  resources:
    limits:
      cpu: 1000m # change accordingly
      memory: 3000Mi # change accordingly
    requests:
      cpu: 500m # change accordingly
      memory: 500Mi # change accordingly

  config_template: |
    {
      "cron_expression" : "{{ .Values.config.cron_expression }}",
      "jobs": []
    }
